function [] = WizualizacjaPodzialu(n,all4,wait)
% Projekt 1, Zadanie 23
% Wiktor Murawski
%
% Funkcja przyjmuje trzy argumenty:
% n - liczba całkowita wyznaczająca ilość trójkątów, na jakie podzielony
% będzie obszar; obszar dzielony jest na 4n^2 trójkątów
% wait - 0 lub 1, domyślna wartość: 0, jeśli wait = 1, to przed
% narysowaniem kolejnego trójkąta program czeka na znak z klawiatury

if nargin < 2
  wait = 0;
end

% Tworzymy figurę
figure(1);
clf(1);
hold on;
% grid on;
axis equal
xlim([-1,1]);
ylim([-1,1]);
xticks(-1:0.5:1)
yticks(-1:0.5:1)
% Rysujemy obszar D
fill([1,0,-1,0],[0,1,0,-1],'r','FaceAlpha',0.2);

for x = 0:n-1
  r = 1;
  % Tworzymy wektor, po którym będziemy iterować
  Y = [repelem(0:n-x-2,2) n-x-1]
  for y = Y
    r = not(r);
    % W zależności od r wyznaczamy współrzędne innych trójkątów dla tych
    % samych wartości x i y
    % Dla r = 0 wierzchołek, przy którym kąt jest prosty, jest bliżej do
    % środka układu współrzędnych niż przeciwprosto`kątna
    % Dla r = 1 wierzchołek, przy którym kąt jest prosty, jest dalej od 
    % (środka układu współrzędnych niż przeciwprostokątna
    triangle = [
      (x+r)/n,(y+r)/n;
      (x+1)/n,y/n;
      x/n,(y+1)/n;
      ];

    % Korzystając z symetrii względem odpowiednich osi wyznaczamy
    % współrzędne wierzchołków w pozostałych ćwiartkach
    triangles = {
      triangle; % I ćwiartka
      [-triangle(:,1),triangle(:,2)]; % II ćwiartka
      [-triangle(:,1),-triangle(:,2)]; % III ćwiartka
      [triangle(:,1),-triangle(:,2)]; % IV ćwiartka
      };

    % Rysujemy trójkąty w 4 ćwiartkach i czekamy na input
    for k = 1:length(triangles)
      t = triangles{k};
      X = [t(1,1),t(2,1),t(3,1)];
      Y = [t(1,2),t(2,2),t(3,2)];
      fill(X,Y,'c','FaceAlpha',0.3);
      if(wait == 1)
        pause();
      end
    end % for k
  end % for y

end % for x

end % function